---
name: Release Libraries

on:
  workflow_call:
    inputs:
      package:
        description: 'Package to release'
        required: true
        type: string
      version:
        description: 'Version to release'
        required: true
        type: string
      dry-run:
        description: 'Dry run (no actual release)'
        required: false
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release'
        required: true
        type: choice
        options:
          - wow-mpq
          - wow-cdbc
          - wow-blp
          - wow-m2
          - wow-wmo
          - wow-adt
          - wow-wdl
          - wow-wdt
          - all
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      dry-run:
        description: 'Dry run (no actual release)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.determine.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine packages to release
        id: determine
        run: |
          if [[ "${{ inputs.package }}" == "all" ]]; then
            PACKAGES='["wow-mpq", "wow-cdbc", "wow-blp", "wow-m2", "wow-wmo", "wow-adt", "wow-wdl", "wow-wdt"]'
          else
            PACKAGES='["${{ inputs.package }}"]'
          fi
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Validate versions
        run: |
          for pkg in $(echo '${{ steps.determine.outputs.packages }}' | jq -r '.[]'); do
            echo "Checking $pkg..."
            cargo metadata --format-version 1 | jq -r ".packages[] | select(.name == \"$pkg\") | .version"
          done

  release-library:
    name: Release ${{ matrix.package }}
    needs: [validate]
    if: ${{ !inputs.dry-run }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.validate.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache library build dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: 'release-lib-${{ matrix.package }}'

      - name: Create git tag for library release
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "${{ matrix.package }}-v${{ inputs.version }}"
          git push origin "${{ matrix.package }}-v${{ inputs.version }}"

      - name: Publish library to crates.io
        run: |
          cargo publish -p ${{ matrix.package }} --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Create GitHub Release for library
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ matrix.package }}-v${{ inputs.version }}
          name: ${{ matrix.package }} v${{ inputs.version }}
          body: |
            ## ${{ matrix.package }} v${{ inputs.version }}

            This release contains the ${{ matrix.package }} library.

            ### Installation

            Add to your `Cargo.toml`:
            ```toml
            [dependencies]
            ${{ matrix.package }} = "${{ inputs.version }}"
            ```

            See [crates.io](https://crates.io/crates/${{ matrix.package }}) for more information.
          draft: false
          prerelease: false

  dry-run:
    name: Dry Run ${{ matrix.package }}
    needs: [validate]
    if: ${{ inputs.dry-run }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.validate.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Simulate library publish (dry run)
        run: |
          echo "Would publish ${{ matrix.package }} v${{ inputs.version }}"
          cargo publish -p ${{ matrix.package }} --dry-run --no-verify
