---
name: CI

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

  merge_group:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Performance improvements
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CARGO_PROFILE_DEV_DEBUG: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick checks that should fail fast
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain with formatting and linting components
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.86.0
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "quick-checks-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true
          cache-all-crates: true

      # Format check (fastest)
      - name: Check formatting
        run: cargo fmt --all -- --check

      # Check compilation
      - name: Check compilation
        run: cargo check --all-features --all-targets

      # Clippy lints
      - name: Clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

  # Main test suite with optimized matrix
  test:
    name: Test (${{ matrix.rust }} on ${{ matrix.os }})
    needs: [quick-checks]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rust: 1.86.0
          - os: ubuntu-latest
            rust: stable
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies for ${{ matrix.os }}
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "tests-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      # Test with all features
      - name: Test all features
        run: cargo test --all-features --workspace

      # Test with no default features
      - name: Test no default features
        run: cargo test --no-default-features --workspace

      # Test each crate individually (only on stable Linux)
      - name: Test individual crates
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        run: |
          cargo test -p wow-mpq --all-features
          cargo test -p wow-blp --all-features
          cargo test -p wow-m2 --all-features
          cargo test -p wow-wmo --all-features
          cargo test -p wow-adt --all-features
          cargo test -p wow-wdl --all-features
          cargo test -p wow-wdt --all-features
          cargo test -p wow-cdbc --all-features
          cargo test -p warcraft-rs --all-features

  # Documentation build - runs in parallel
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain for documentation
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.86.0

      - name: Cache documentation dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "docs-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true
          cache-all-crates: true
      - name: Build documentation
        run: cargo doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings
      - name: Check for broken links
        run: cargo doc --all-features --no-deps --document-private-items

  # Distribution-specific testing
  distro-test:
    name: Test on ${{ matrix.distro }}
    needs: [quick-checks]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: alpine:latest
            prepare: apk add --no-cache gcc musl-dev
          - distro: fedora:latest
            prepare: dnf install -y gcc
          - distro: archlinux:latest
            prepare: pacman -Syu --noconfirm gcc
          - distro: debian:bookworm
            prepare: apt-get update && apt-get install -y gcc
    container:
      image: ${{ matrix.distro }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for ${{ matrix.distro }}
        run: ${{ matrix.prepare }}

      - name: Install Rust via rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build and test warcraft-rs CLI
        run: |
          source $HOME/.cargo/env
          cargo build --release --bin warcraft-rs
          cargo test --release --bin warcraft-rs
          # Test the binary runs
          ./target/release/warcraft-rs --version

  # Coverage collection - runs in parallel
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable toolchain with LLVM tools
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools

      - name: Cache coverage dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "coverage-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true
          cache-all-crates: true

      - name: Install cargo-llvm-cov for coverage collection
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Collect coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Success marker for branch protection
  ci-success:
    name: CI Success
    if: always()
    needs: [quick-checks, test, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs succeeded"
          fi
