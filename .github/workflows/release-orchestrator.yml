---
name: Release Orchestrator

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - cli
          - library
          - all
      package:
        description: 'Package to release (for library releases)'
        required: false
        type: choice
        options:
          - wow-mpq
          - wow-cdbc
          - wow-blp
          - wow-m2
          - wow-wmo
          - wow-adt
          - wow-wdl
          - wow-wdt
          - warcraft-rs
          - all
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      dry-run:
        description: 'Dry run (no actual release)'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  determine-release:
    name: Determine Release Strategy
    runs-on: ubuntu-latest
    outputs:
      release-cli: ${{ steps.determine.outputs.release-cli }}
      release-libraries: ${{ steps.determine.outputs.release-libraries }}
      library-package: ${{ steps.determine.outputs.library-package }}
    steps:
      - name: Parse release inputs and determine strategy
        id: determine
        run: |
          if [[ "${{ inputs.release-type }}" == "cli" ]]; then
            echo "release-cli=true" >> $GITHUB_OUTPUT
            echo "release-libraries=false" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.release-type }}" == "library" ]]; then
            echo "release-cli=false" >> $GITHUB_OUTPUT
            echo "release-libraries=true" >> $GITHUB_OUTPUT
            if [[ "${{ inputs.package }}" == "warcraft-rs" ]]; then
              echo "::error::warcraft-rs is the CLI package. Use 'cli' release type instead."
              exit 1
            fi
            echo "library-package=${{ inputs.package }}" >> $GITHUB_OUTPUT
          else
            echo "release-cli=true" >> $GITHUB_OUTPUT
            echo "release-libraries=true" >> $GITHUB_OUTPUT
            echo "library-package=all" >> $GITHUB_OUTPUT
          fi

  release-cli:
    name: Release CLI
    needs: [determine-release]
    if: needs.determine-release.outputs.release-cli == 'true'
    uses: ./.github/workflows/release-cli.yml
    with:
      version: ${{ inputs.version }}
      dry-run: ${{ inputs.dry-run }}
    secrets: inherit

  release-libraries:
    name: Release Libraries
    needs: [determine-release]
    if: needs.determine-release.outputs.release-libraries == 'true'
    uses: ./.github/workflows/release-libraries.yml
    with:
      package: ${{ needs.determine-release.outputs.library-package }}
      version: ${{ inputs.version }}
      dry-run: ${{ inputs.dry-run }}
    secrets: inherit

  summary:
    name: Release Summary
    needs: [determine-release, release-cli, release-libraries]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate release summary report
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ inputs.dry-run }}" == "true" ]]; then
            echo "🧪 **This was a dry run - no actual releases were created**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Release Type: ${{ inputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.determine-release.outputs.release-libraries }}" == "true" ]]; then
            echo "- Package: ${{ needs.determine-release.outputs.library-package }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.release-cli.result }}" == "success" ]]; then
            echo "- ✅ CLI Release: Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.release-cli.result }}" == "skipped" ]]; then
            echo "- ⏭️ CLI Release: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ CLI Release: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.release-libraries.result }}" == "success" ]]; then
            echo "- ✅ Library Release: Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.release-libraries.result }}" == "skipped" ]]; then
            echo "- ⏭️ Library Release: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Library Release: Failed" >> $GITHUB_STEP_SUMMARY
          fi
